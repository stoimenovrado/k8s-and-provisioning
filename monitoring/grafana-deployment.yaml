apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana-deployment
  namespace: monitoring
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      volumes:
        - name: grafana-datasource-config
          persistentVolumeClaim:
            claimName: grafana-pvc
      initContainers:
        - name: init-download-datasource-config
          image: busybox:latest
          command: ["wget", "https://raw.githubusercontent.com/stoimenovrado/k8s-and-provisioning/main/monitoring/datasource-graf.yaml", "-O", "/etc/grafana/provisioning/datasources/datasource.yml"]
          volumeMounts:
            - name: grafana-datasource-config
              mountPath: /etc/grafana/provisioning/datasources
      containers:
      - name: grafana
        image: grafana/grafana
        resources:
          requests:
            memory: "750Mi"
            cpu: "500m"
          limits:
            memory: "1024Mi"
            cpu: "950m"
        ports:
          - containerPort: 3000
        volumeMounts:
          - name: grafana-datasource-config
            mountPath: /etc/grafana/provisioning/datasources/datasource.yml
            subPath: datasource.yml
        env:
          - name: GF_SECURITY_ADMIN_USER
            value: radoslv
          - name: GF_SECURITY_ADMIN_PASSWORD
            value: Parolka1
          - name: HOST
            value: prometheus
          - name: PORT
            value: "9090"
        readinessProbe:
          httpGet:
            path: "/-/ready"
            port: 3000
          initialDelaySeconds: 30
          timeoutSeconds: 30
        livenessProbe:
          httpGet:
            path: "/-/healthy"
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 30
      terminationGracePeriodSeconds: 300
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
